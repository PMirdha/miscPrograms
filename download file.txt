#include <iostream>
#include <algorithm>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <vector>
using namespace std;
#define FOR(x,a,b) for(x=a;x<=b;x++)
#define MALLOC(a,dt,n) a=(dt*)malloc(sizeof(dt)*n)
#define MEMSET(a,dt,n) memset(a,0,sizeof(dt)*n)
#define ABS(x) ((x)<0?(-1*(x)):(x))
#define MAX(x,y) x>y?x:y
#define MIN(x,y) x<y?x:y
#define ll long long
#define N 1000000007

int check_representation_invarient_func()
{}


int main() {
	// your code goes here
	int t=0;
	
	scanf("%d",&t);
	while(t--)
	{
		



	}
	
	return 0;
}


#include<bits/stdc++.h>
#include <stdio.h>

int main(void) {
	// your code goes here
	
	int t=0;
	
	char c;
	
	scanf("%d",&t);
	
	c=getchar();
	
	while(t--)
	{
		c=getchar();
		while(c)
		{
			
			c=getchar();
		}
		
	}
	return 0;
}


#include <stdlib.h>

//ascending
int cmpfunc (const void * a, const void * b)
{
   return ( *(int*)a - *(int*)b );
}

//descending
int cmpfunc (const void* p1, const void* p2)
{ 
   int i1 = *(int*) p1;
   int i2 = *(int*) p2;
   if (i1 < i2) return 1;
   else if (i1 == i2) return 0;
   else return -1;
   /* or simply: return i1 - i2; */
 }


qsort(array, number of element, sizeof(int), cmpfunc);


int *item;
//item = (int*) bsearch (&key, values, 5, sizeof (int), cmpfunc);
item = (int*) bsearch(&key, array , n,sizeof(int), cmpfunc);



int **arr ;
arr= (int **)malloc(r * sizeof(int *));
    for (i=0; i<r; i++)
         arr[i] = (int *)malloc(c * sizeof(int));

vecotr< vector(int) > Matrix(row, vector<int> (col,0))

vector<T>().swap(x);

void swap_func(vector<int>&a,int x,int y)
{
	a[x]^=a[y];
	a[y]^=a[x];
	a[x]^=a[y];
}


#if defined(_WIN64)
 
#define GC getchar
#define PC putchar
 
#else
	
#define GC getchar_unlocked
#define PC putchar_unlocked
 
#endif
 
#define FRE freopen("input.txt","r",stdin);
 
#ifdef LONG
 
typedef long long int ll;
 
#else
	
typedef int ll;
 
#endif






#include <iostream>
#include <cstdlib>
#include <cstring>
#include <cstdio>
#include <vector>
using namespace std;
#define FOR(x,a,b) for(x=a;x<=b;x++)
#define MALLOC(a,dt,n) a=(dt*)malloc(sizeof(dt)*n)
#define MEMSET(a,dt,n) memset(a,0,sizeof(dt)*n)
#define QSORT(a,n,dt) qsort(a,n, sizeof(dt), cmpfunc)
#define ABS(x) x<0?-(x):x
#define MAX(x,y) x>y?x:y
#define MIN(x,y) x<y?x:y
#define ll long long

//ascending
int cmpfunc (const void * a, const void * b)
{
   return ( *(ll int*)a - *(ll int*)b );
}

int check_representation_invarient_func()
{}

ll int calcu_func(vector<ll int>dista,vector<ll int>counta,int n,int index)
{
	ll int x=dista[index];
	//cout<<"x = "<<x<<endl;
	int i,j;
	ll int sum=0;
	ll int z=0,y=counta[index];
	ll int val=(y*(y-1))/2;
	FOR(i,0,n-2)
	{
		FOR(j,i+1,n-1)
		{
			z=counta[i];
			y=counta[j];
			if(dista[i]==x)
			{
				z=counta[i];
				z=(z*(z-1)*(z-2))/6;
				if(z>0 && (dista[j]-dista[i])/2<x)
				{
					//cout<<"i = "<<i<<" j = "<<j<<" z>0 && z = "<<z<<" y = "<<y<<endl;
					sum+=(z*y);
				}
			}
			else if(dista[j]==x)
			{
				y=counta[j];
				y=(y*(y-1)*(y-2))/6;
				if(y>0 && (dista[j]-dista[i])/2<x)
				{
					//cout<<"i = "<<i<<" j = "<<j<<" y>0 && z = "<<z<<" y = "<<y<<endl;
					sum+=(z*y);
				}
			}
			else
			{
				if((dista[j]-dista[i])/2<x)
				{
					//cout<<"i = "<<i<<" j = "<<j<<" else part && z = "<<z<<" y = "<<y<<" val = "<<z*y*val<<endl;
					sum+=(z*y*val);
				}
				else
					break;
			}
		}
	}
	//sum*=val;
	//cout<<"x = "<<x<<" sum= = "<<sum<<endl;
	return(sum);
}


int main() {
	// your code goes here
	int t=0;
	ll int n,i,j,k,x,y,z;
	int o=1;
	ll int sum,pre;
	vector<ll int> a,counta,dista;
	
	cin>>t;
	while(t--)
	{
		cin>>n;
		FOR(i,0,n-1)
		{
			cin>>x;
			a.push_back(x);
			counta.push_back(0);
			dista.push_back(0);
		}
		QSORT(&a[0],n,ll int);
		pre=a[0];
		counta[0]=1;
		dista[0]=pre;
		j=0;
		FOR(i,1,n-1)
		{
			if(a[i]==pre)
			{
				counta[j]++;
			}
			else
			{
				j++;
				counta[j]++;
				dista[j]=a[i];
			}
			pre=a[i];
		}
		j++;
		sum=0;
		FOR(i,0,j-1)
		{
			if(counta[i]>1)
			{
				sum+=calcu_func(dista,counta,j,i);
			}
		}
		cout<<"Case #"<<o<<": "<<sum<<endl;
		o++;
		counta.clear();
		a.clear();
		dista.clear();
	}
	
	return 0;
}